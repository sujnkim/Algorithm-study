"""
[ch11.greedy] 11-1: 모험가 길드 | 난이도 1 | 핵심유형
INPUT:
    * 첫째 줄 모험가 수 n
    * 둘째 줄 각 모험가의 공포도(n이하의 자연수 n개, 공백 구분)
OUTPUT: 여행을 떠날 수 있는 그룹의 최댓값
"""
import time

#input
n = input()
data = list(map(int,input().split()))

"""
[풀이 구상]
그룹 생성 규칙:
* 공포도가 x인 사람은 x명 이상으로 구성된 그룹에 배정
* 모든 사람이 그룹에 포함될 필요는 없음
feasible solution: 여행을 떠날 수 있는 그룹 생성
optimal solution: 생성 그룹의 개수가 최대


-> 최대한 많은 그룹을 만들기 위해서는 각 그룹 당 인원 수를 적게 만들어야
한다고 생각했음.
공포도가 작은 사람들은 인원이 적은 팀을 구성 가능함.
따라서 공포도를 오름차순 정렬한 후, 공포도가 작은 사람부터 포함시키며
그룹을 구성해나가자

(a를 포함한 그룹의 인원수 >= a의 공포도)이면 그룹 생성 가능
"""
#solve
start = time.time()

result = 0
data.sort()     #공포도 오름차순 정렬

cnt = 0    # 그룹의 인원수
for d in data:
    cnt += 1    # 현재 그룹에 포함시키기
    if cnt>=d:
        result += 1    # 그룹 개수 증가
        cnt = 0        # 그룹 인원수 초기화

#output
print(result)

#time check
end = time.time()
print(f"{end-start:.5f} sec")


"""
[느낀점]-------------------------------------
공포도가 작은 사람부터 그룹을 구상하면 된다까지 생각했는데,
+ 꼭 그룹에 들어갈 필요는 없다
+ 공포도는 총 사람의 인원보다 적음
이 조건들을 빼먹어서 이상한 예시를 들어가며 시간 낭비함
"""