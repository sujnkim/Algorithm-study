"""
[ch4.구현] 4-4: 게임 개발 | 난이도2 | 실전문제
INPUT:
    * 첫째 줄: 맵 세로크기n, 가로크기m ( 3<=n,m<=50)
    * 둘째 줄에 공백으로 구분된 캐릭터가 있는 좌표(A,B)와 바라보는 방향d
    * 셋째 줄부터 맵의 상태(육지:0,바다:1)이 주어짐
OUTPUT: 이동을 마친 후 캐릭터가 방문한 칸의 개수 출력
"""
import time

#input-----------------------------------------------------
n, m = map(int, input().split())
a, b, dir = map(int, input().split())

data = []            # 지형정보 저장 이중리스트 data(m 크기의 리스트가 n개)
for i in range(n):
    data.append(list(map(int, input().split())))

"""
[주어진 조건]-------------------------------------------------------------
캐릭터는 상하좌우로 움직일 수 있고 바다로 된 공간에 갈 수 없음(맵 외곽은 항상 바다)
처음에 캐릭터가 위치한 칸의 상태는 항상 육지
매뉴얼:
1) 현재 위치에서 현재 방향을 기준으로 왼쪽부터 탐색
2) if 왼쪽 방향에 가보지 않은 칸 존재-> 왼쪽으로 회전, 한 칸 전진
                가보지 않은 칸 없음 -> 왼쪽으로 회전, 1)로 돌아감
3) if 네 방향 다 이미 가봄 or 바다로 된 칸 -> 방향 유지, 한 칸 후진, 1)로 돌아감
    단, 뒤쪽 방향이 바다인 경우 정지

[풀이 구상]
어떤 객체(캐릭터)가 주어진 맵 내에서 정해진 매뉴얼에 의거해 
차례대로 움직이는 시스템이므로 시뮬레이션 문제라고 판단.
"""

#solve---------------------------------------------------
start = time.time()
result = 0            #방문한 칸의 개수(output) 초기화

# 이미 방문한 칸을 표시할 이중리스트 come, 0으로 초기화
come = [ [0]*m for _ in range(n) ]
come[a][b] = 1            # 최초의 위치 1로 초기화
result += 1

# 이동변화량 북, 동, 남, 서
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽으로 회전하는 함수----------------------------------
def turn_left():
    global dir
    dir -= 1
    if dir == -1:
        dir = 3

# 시뮬레이션 시작---------------------------------------------
turn_cnt = 0
while True:

    #왼쪽으로 회전
    turn_left()
    ta = a + dx[dir]
    tb = b + dy[dir]

    # 회전한 이후, 처음 방문하는 칸 and 육지
    if come[ta][tb]==0 and data[ta][tb]==0:
        come[ta][tb] = 1
        a = ta
        b = tb
        result += 1
        turn_cnt = 0
        continue
    else:
        turn_cnt += 1

    # 4방향 모두 갈 수 없는 경우   
    if turn_cnt == 4:
        ta = a - dx[dir]
        tb = b - dy[dir]

        # 만약 바다라서 후진할 수 없다면, 정지
        if data[ta][tb]==1:
            break
        else:
            a = ta
            b = tb
            turn_cnt = 0
    

#output-------------------------------------------------------
print(result)

#timecheck
end = time.time()
print(f"{end-start:.5f} sec")

"""
[느낀점]---------------------------------------------------------------
+ TypeError: 'list' object is not callable 에러
-> 함수와 변수명이 중복되었을 경우 발생
-> 지형을 저장할 이중리스트 이름을 map으로 지었더니 map()함수와 중복

+ 이중 리스트 초기화 방법, 입력 저장 방법 숙지할 것.
-> come = [ [0]*m for _ in range(n) ] : <리스트 컴프리헨션>
-> i 대신 _를 사용 (반복마다 i라는 변수가 작용하는 것이 아니므로...)
-> map.append(list(map(int, input().split()))

+ 방향을 설정하여 이동하는 문제에서는
dx,dy라는 별도의 리스트를 만들어 방향을 정하자!!!

+ 처음 방향 회전을 구현할 때 현재 방향의 왼쪽부터 탐색하기 위해
4번 반복하는 for문을 사용하고 구현했었음
-> 책의 예시에서는 왼쪽으로 회전하는 <함수turn_left()>를 만들어서 깔끔하게 구현함
-> 방향을 나타내는 변수 dir이 함수 바깥에서 선언되었으므로 <global 키워드> 사용
-> 몇 번 회전했는지 알기 위해 turn_time 변수를 설정
-> turn_time = 4일 경우, 네 방향 모두 갈 수 없다는 것을 쉽게 알 수 있음

+후진할 때 현재 바라보는 방향에서 뒤로 가는 것이므로 덧셈이 아니라 뺄셈을 수행
"""